#!/usr/bin/env node

const fs = require("fs");
const bigmap = require('./cli/bigmap_cli.js');

const yargs = require("yargs");

const options = yargs
  .usage("Usage: $0 <cmd> [args]")
  .option("add-data-buckets", { describe: "Add data buckets to BigMap", type: "array", requiresArg: true, demandOption: false })
  .option("get", { describe: "Get key, start with @ to load from file", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("put", { describe: "Put value for given key", type: "array", requiresArg: true, nargs: 2, demandOption: false })
  .option("maintenance", { describe: "Run maintenance", type: "bool", nargs: 0, demandOption: false })
  .option("set-data-bucket-wasm-binary", { describe: "Set Wasm binary for the data buckets from the provided file name", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("call-index", { describe: "Call an index canister function", type: "array", requiresArg: true, demandOption: false })
  .option("call-data", { describe: "Call a data canister function", type: "array", requiresArg: true, demandOption: false })
  .showHelpOnFail(false, "Specify --help for available options")
  .argv;

if (options.addDataBuckets) {
  let data_buckets = options.addDataBuckets;
  console.log(`Add data buckets ${data_buckets}`);
  bigmap.addDataBuckets(data_buckets);
}

if (options.get) {
  let key = options.get;
  if (key[0] == '@') {
    key = fs.readFileSync(key.substring(1));
  }
  bigmap.get(key);
}

if (options.put) {
  if (options.put.length == 2) {
    let key = options.put[0];
    let value = options.put[1];
    if (key[0] == '@') {
      key = fs.readFileSync(key.substring(1));
    }
    if (value[0] == '@') {
      value = fs.readFileSync(value.substring(1));
    }
    bigmap.put(key, value);
  } else {
    console.log("Put requires exactly two arguments: key value");
  }
}

if (options.setDataBucketWasmBinary) {
  bigmap.setDataBucketWasmBinary(options.setDataBucketWasmBinary)
}

if (options.maintenance) {
  bigmap.maintenance()
}

if (options.callIndex) {
  if (options.callIndex.length >= 1) {
    bigmap.callIndex(options.callIndex[0], options.callIndex.slice(1))
  } else {
    console.log("--call-index requires 1 or more arguments: <functionName> [arg1 [arg2 [...]]]");
  }
}

if (options.callData) {
  if (options.callData.length >= 2) {
    bigmap.callData(options.callData[0], options.callData[1], options.callData.slice(2))
  } else {
    console.log("--call-data requires 2 or more arguments: <canisterId> <functionName> [arg1 [arg2 [...]]]");
  }
}

if (process.argv.length < 3) {
  yargs.showHelp()
}
