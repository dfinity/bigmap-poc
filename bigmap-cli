#!/usr/bin/env node

const fs = require("fs");
const bigmap = require('./cli/bigmap_cli.js');

const yargs = require("yargs");

const options = yargs
  .usage("Usage: $0 <cmd> [args]")
  .option("get", { describe: "Get key; start with @ to load from file", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("o", { describe: "Output filename for the --get command", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("put", { describe: "Put value for given key", type: "array", requiresArg: true, nargs: 2, demandOption: false })
  .option("put-and-fts-index", { describe: "Put value and add to the FTS index", type: "array", requiresArg: true, nargs: 2, demandOption: false })
  .option("put-and-fts-index-file", { describe: "Put and FTS index data from file", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("remove_from-fts-index", { describe: "Remove key from the search index", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("append", { describe: "Append to the value for given key", type: "array", requiresArg: true, nargs: 2, demandOption: false })
  .option("delete", { describe: "Delete the given key", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("list", { describe: "List keys with the given prefix", type: "array", requiresArg: false, demandOption: false })
  .option("maintenance", { describe: "Run maintenance", type: "bool", nargs: 0, demandOption: false })
  .option("status", { describe: "Get status of the BigMap deployment", type: "bool", nargs: 0, demandOption: false })
  .option("set-data-bucket-wasm-binary", { describe: "Set Wasm binary for the data buckets, from file", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("set-search-wasm-binary", { describe: "Set Wasm binary for the search canisters, from file", type: "string", requiresArg: true, nargs: 1, demandOption: false })
  .option("search", { describe: "Search for the terms", type: "array", requiresArg: true, requiresArg: true, demandOption: false })
  .option("call-index", { describe: "Call an index canister function", type: "array", requiresArg: true, demandOption: false })
  .option("call-data", { describe: "Call a data canister function", type: "array", requiresArg: true, demandOption: false })
  .showHelpOnFail(false, "Specify --help for available options")
  .argv;

if (options.get) {
  let key = options.get;
  if (key[0] == '@') {
    key = fs.readFileSync(key.substring(1));
  }
  if (options.o) {
    bigmap.getToFile(key, options.o);
  } else {
    bigmap.get(key);
  }
}

if (options.put) {
  if (options.put.length == 2) {
    let key = options.put[0];
    let value = options.put[1];
    if (key[0] == '@') {
      key = fs.readFileSync(key.substring(1));
    }
    if (value[0] == '@') {
      value = fs.readFileSync(value.substring(1));
    }
    bigmap.put(key, value);
  } else {
    console.log("Put requires exactly two arguments: key value");
  }
}

if (options.append) {
  if (options.append.length == 2) {
    let key = options.append[0];
    let value = options.append[1];
    if (key[0] == '@') {
      key = fs.readFileSync(key.substring(1));
    }
    if (value[0] == '@') {
      value = fs.readFileSync(value.substring(1));
    }
    bigmap.append(key, value);
  } else {
    console.log("Append requires exactly two arguments: key value");
  }
}

if (options.delete) {
  let key = options.delete;
  if (key[0] == '@') {
    key = fs.readFileSync(key.substring(1));
  }
  bigmap.deleteKey(key);
}

if (options.list) {
  // Take only the first argument to '--list'
  let key_prefix = (options.list && options.list[0]) || "";
  if (key_prefix[0] == '@') {
    key_prefix = fs.readFileSync(key_prefix.substring(1));
  }
  bigmap.list(key_prefix);
}

if (options.setDataBucketWasmBinary) {
  bigmap.setDataBucketWasmBinary(options.setDataBucketWasmBinary)
}

if (options.setSearchWasmBinary) {
  bigmap.setSearchWasmBinary(options.setSearchWasmBinary)
}

if (options.maintenance) {
  bigmap.maintenance()
}

if (options.status) {
  bigmap.status()
}

if (options.callIndex) {
  if (options.callIndex.length >= 1) {
    bigmap.callIndex(options.callIndex[0], options.callIndex.slice(1))
  } else {
    console.log("--call-index requires 1 or more arguments: <functionName> [arg1 [arg2 [...]]]");
  }
}

if (options.callData) {
  if (options.callData.length >= 2) {
    bigmap.callData(options.callData[0], options.callData[1], options.callData.slice(2))
  } else {
    console.log("--call-data requires 2 or more arguments: <canisterId> <functionName> [arg1 [arg2 [...]]]");
  }
}

if (options.putAndFtsIndex) {
  if (options.putAndFtsIndex.length == 2) {
    let key = options.putAndFtsIndex[0];
    let value = options.putAndFtsIndex[1];
    if (key[0] == '@') {
      key = fs.readFileSync(key.substring(1));
    }
    if (value[0] == '@') {
      value = fs.readFileSync(value.substring(1));
    }
    bigmap.put_and_fts_index(key, value);
  } else {
    console.log("putAndFtsIndex requires exactly two arguments: key value");
  }
}

if (options.putAndFtsIndexFile) {
  bigmap.put_and_fts_index_file(options.putAndFtsIndexFile);
}

if (options.removeFromFtsIndex) {
  let key = options.removeFromFtsIndex;
  if (key[0] == '@') {
    key = fs.readFileSync(key.substring(1));
  }
  bigmap.remove_from_fts_index(key);
}

if (options.search) {
  bigmap.search(options.search);
}

if (process.argv.length < 3) {
  yargs.showHelp()
}
